#!/usr/bin/perl

use Cwd 'abs_path';
use Cwd 'cwd';

# Read a ChangeLog file and return just the first paragraph.
sub read_clog {
    my ($fname) = @_;

    open (CLOG, "<", $fname);
    my (@para) = ();
    my $state = 0;

    while (<CLOG>) {
	chomp;

	if (m/^\s*$/) {
	    ++$state;
	}
	last if $state == 3;

	push @para, $_;

	if ($state == 0) {
	    m/^[0-9]+/ || die "badly formatted ChangeLog entry in $fname";
	    ++$state;
	}
    }

    close (CLOG);
    return @para;
}

sub print_lines {
    my ($file, $cl_name, @text) = @_;
    my ($line);

    print $file $cl_name;
    print $file "\n";
    my ($last_was_empty) = 0;
    for $line (@text) {
	if ($last_was_empty && $line eq '') {
	    next;
	}
	$last_was_empty = ($line eq '');

	print $file $line;
	print $file "\n";
    }
}

@prefix = ();
@suffix = ();
@changelogs = ();
@old_cl_text = ();

$fixup_mode = ($ARGV[0] eq '-');

$squash_mode = defined $ARGV[1] && $ARGV[1] eq 'squash';

if (!defined $ENV{'GIT_PREFIX'} || $ENV{'GIT_PREFIX'} eq '') {
    $ENV{'GIT_PREFIX'} = '.';
}
$ENV{'GIT_PREFIX'} .= '/';

# Find the absolute top directory.
chomp ($top = `git rev-parse --show-toplevel`);
$top .= '/' unless $top =~ /\/$/;

open (MSG, "<" . $ARGV[0]) || die "can't read commit file";

$where = 0;
$change_id = '';
while (<MSG>) {
    chomp;

    if (m/^\# Please enter the commit/) {
	$where = 2;
    }

    $is_comment = ($fixup_mode && m/^\#/);

    next if m/\~ChangeLog\~/;

    if (/^Change-Id:/) {
	# No matter which state we're in, we might see a change id.
	# We want to save the first one and restore it at the end.
	if ($change_id eq '') {
	    $change_id = $_;
	}
    } elsif ($where == 0) {
	# Allow "ChangeLog" or "dir/ChangeLog"; but also allow
	# upgrading from before gdb added the ChangeLog file name
	# convention to commits, and search for the first line of a
	# ChangeLog entry.
	if (m,^(.*/)?ChangeLog$,) {
	    # With commit -C we don't get information about changes,
	    # so remember the current ChangeLog hunk.
	    push @old_cl_text, $_;
	    ++$where;
	} elsif (m/^[0-9]{4}-[0-9]{2}-[0-9]{2}\s/) {
	    push @old_cl_text, $_;
	    ++$where;
	} else {
	    push @prefix, $_;
	}
    } elsif ($where == 1) {
	if ($squash_mode && m/^\#.* commit message/) {
	    # In squash mode, we alternate text/ChangeLog/text/ChangeLog.
	    # So, we just finished a "ChangeLog", go back to text.
	    $where = 0;
	} elsif (!$is_comment) {
	    push @old_cl_text, $_;
	}
    } else {
	if ($squash_mode) {
	    if (m/^\#.* commit message/) {
		# In squash mode, we alternate text/ChangeLog/text/ChangeLog.
		# So, we just finished a "ChangeLog", go back to text.
		$where = 0;
	    }
	    push @suffix, $_;
	} elsif (!$is_comment) {
	    push @suffix, $_;
	}
    }

    if ($_ =~ s,^\#\s+(modified|new file):\s+((.*/|)ChangeLog)$,\2,) {
	push @changelogs, $_;
    }
}

close (MSG);

open (my $msg, ">" . $ARGV[0]) || die "can't reopen file for writing";

print_lines ($msg, @prefix);

if (!scalar @changelogs) {
    print_lines ($msg, @old_cl_text);
} else {
    for $file (@changelogs) {
	$file = abs_path ($ENV{'GIT_PREFIX'} . $file);
	@cl_lines = read_clog ($file);
	# Make sure the ChangeLog file name is relative to the git
	# root.
	print_lines ($msg, substr ($file, length ($top)), @cl_lines);
	if (scalar @cl_lines > 0) {
	    print $msg "\n";
	}
    }
}

if ($change_id ne '') {
    print $msg $change_id;
    print $msg "\n\n";
}

print_lines ($msg, @suffix);

close ($msg);
exit 0;
